
import os
import pickle
'''
def get_frame_numbers(data_dir):
    frame_numbers = {}
    for sample in os.listdir(data_dir):
        sample_dir = os.path.join(data_dir, sample)
        frame_idx = sorted([int(frame.split('.')[0].split('_')[-1]) for frame in os.listdir(sample_dir)])
        # 检查time_series文件夹下的对应的sample_k.pkl文件中frame部分与frame_idx是否一致
        video_name = sample.split('_')[1]
        pkl_dir="collect_331_5D_surface/time_series"
        with open(os.path.join(pkl_dir, f"sample_{video_name}.pkl"), 'rb') as f:
            data = pickle.load(f)
            if data['frame'] != frame_idx:
                print(f"sample: {sample} frame: {frame_idx} data: {data['frame']}")
    return frame_numbers


get_frame_numbers("collect_331_5D_surface/videos")
'''
'''
with open(os.path.join("collect_331_5D_surface/time_series", "sample_96.pkl"), 'rb') as f:
    data = pickle.load(f)
    print(len(data['frame']))
    print(data['frame'])

i=0
for k in data['frame']:
    if k!=i:
        print(k)
    i+=1'''

# 检查time_series文件夹下的对应的sample_k.pkl文件中fx，fy，fz部分各自的最大值和最小值
# {'frame': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], 'fx': [-0.08781429026326658, 0.029836750965811745, 0.022752249344827367, 0.9296426843798765, 1.7485267643968252, 1.056272335551724, 1.1367676232105262, 1.3419810666595742, 1.197099428177489, 1.1660197881379308, 1.1213697967405856, 1.0389463407467248, 1.0296563992510457, 1.0370845928461536, 1.0351349817350426, 0.9918448231201714, 1.1154696283617018, 1.1349112234827583, 1.1576844070851062, 1.3325336814892703, 1.3517187868260867, 1.3993850338275862, 1.4169995344415953, 1.4784023825146442, 1.3805058556666665, 1.556535881982456, 1.4986860496382977, 1.5658669560212763, 1.5116243553090127, 1.6095205287435896, 1.5749744836808508, 1.6963664389999997, 1.5904350389999997, 1.3063029389999996, 1.1730630389999999, 1.6788085368021977, 1.8811589993448272, 1.7137727424188032, 1.7610190763390556, 1.7556519561673818, 1.8995967475106381, 1.8273080553793102, 1.918082725324786, 1.8730079845840453, 1.9422512019310343, 1.8870979993448274, 1.8679876889999998, 1.9625373364895395, 1.868155033827586, 1.8809082283617018, 1.9852900031025638, 1.9817802838275862, 1.9506238411276593, 1.9977035985744678, 2.0462765751031515, 2.095754595521739, 2.0219500529240504, 2.086386131139738, 2.183742844579399, 2.1658841889999993, 2.031996145896551, 2.144755183635193, 2.171492143255319, 2.1383352995150213, 2.201966520196581, 2.2133002617272726, 2.202825239813008, 2.1822213553090126, 2.238942432617021, 2.357417039, 2.295929649638298, 2.288818176288135, 2.2744103355517242, 2.3399245279830505, 2.2731516514463515, 2.3338766484017093, 2.348100304217391, 2.3991093927815124, 2.354732039858369, 2.463214098292035, 2.2973772833983404, 2.41654713550655, 2.4380096128197426, 2.3944251264999994, 2.426861310179039, 2.393458311384937, 2.358494754315315, 2.3425346186875, 2.329679426179487, 2.329780232617021, 2.31706570244086, 2.2941893027339053, 2.2845103935454545, 2.285025260100917, 2.274965101601626, 2.2676277205126047, 2.2678480607391305, 2.2672325237457627, 2.2645665800256407, 2.263061039917431, 2.262319457672199, 2.257721957181818], 'fy': [0.37872227928954144, 0.029936367837606778, -0.054951807965517296, 0.8688534365646817, 1.6542357768730158, 0.9518033644482757, 1.1033143136315788, 1.111091450361702, 1.1181835445497834, 1.059134386, 1.0344727191589957, 0.9293391103449781, 0.9761321543054393, 1.0157062738205127, 1.0197011627094017, 0.9170258640042918, 0.753886731212766, 0.7948439032413792, 0.7574561524893616, 0.6428284777381973, 0.569745517521739, 0.506771735137931, 0.49944323678347574, 0.4411021459372384, 0.38886856933333325, 0.29933720398245606, 0.3929933269574467, 0.31557535248936164, 0.3078940099270386, 0.22219640202564095, 0.18729525887234036, 0.17309254988888884, 0.13825146099999994, 0.39971756099999994, 0.4959106609999999, 0.1450088027582417, 0.03900283858620684, 0.05120135074358969, -0.033584998656652425, 0.009158177309012817, -0.06774286453191496, -0.03036479503448282, -0.08549519626495732, -0.16101233586609692, -0.17348381658620696, -0.18202115710344832, -0.21427746744827592, -0.26939944820502093, -0.15358483382758628, -0.23935186878723408, -0.17507227746153853, -0.34846176055172423, -0.3086926687872341, -0.37267726878723406, -0.347649786277937, -0.3929627303043479, -0.4730674246540085, -0.3816334224061136, -0.4502154020901288, -0.5178065348333334, -0.4439603769310345, -0.5756190372832619, -0.5923726858085108, -0.5322423462961374, -0.6068225865783476, -0.6098808980909092, -0.5985459544471545, -0.661300612390558, -0.6411294007021276, -0.6456514955217392, -0.7190179368723405, -0.7782978915423729, -0.7196191614137932, -0.7719848195084746, -0.7176168269828327, -0.7748788971196582, -0.7686512303043479, -0.8246460541260505, -0.7963749042360515, -0.9181039735132743, -0.8744745543526972, -0.8768913525371179, -0.8949137454377684, -0.9374183181666668, -0.9530138896550219, -0.8904766490418411, -0.8260760272882883, -0.858200473375, -0.8385830167777778, -0.8307297581489362, -0.809632374483871, -0.7933607797725322, -0.7582159745371901, -0.7785832940458717, -0.7798199219268294, -0.7644059616890757, -0.7639517694347827, -0.7844088830677967, -0.7720085637863249, -0.749629128908257, -0.7573911560124482, -0.7521357208181819], 'fz': [0.4559069328016502, 0.12418304629059979, 0.604473810068967, 4.107358604057496, 6.772294162285716, 4.14000498248276, 4.819670105894739, 5.059585311829789, 4.7244298462684, 4.505882323000002, 4.412740837121341, 4.084536592104805, 4.105220548418412, 4.103022435179489, 4.1073209052649595, 3.9153427226781132, 3.9244245203404273, 4.010902189379312, 3.9719795331063845, 4.052343027399143, 3.8581461523478278, 3.982856271275864, 3.9598568867464405, 3.9185658162008385, 3.644476998000002, 3.876348013789475, 3.7317326097021293, 3.9017698437446824, 3.6442193235364826, 3.725105930905985, 3.667236035234044, 3.775664570222224, 3.852635948000002, 3.2895284480000013, 3.0606294480000016, 3.7128484589890127, 3.7458159307586225, 3.587355093299147, 3.646082838557942, 3.513149829974251, 3.777479196936172, 3.5866434609310365, 3.6213844138119677, 3.5678098126723663, 3.6527732842068983, 3.6632633531724155, 3.48104835748276, 3.5050987576234327, 3.6204595773103465, 3.4251722905531934, 3.5359854052649586, 3.652418766965519, 3.4027546948085123, 3.574325639489363, 3.5964385683438413, 3.513876404521741, 3.526119186396626, 3.4881667143755477, 3.643884469459229, 3.6171213230000014, 3.3027289221379323, 3.492120937270388, 3.5285434139574483, 3.4129833707467827, 3.5699888554074093, 3.509945002545456, 3.453471448000002, 3.533902160446354, 3.460995477787236, 3.6208361697391322, 3.5595201756595762, 3.4992853802033914, 3.483724758344829, 3.517399058169493, 3.494098769888414, 3.52917357620513, 3.515307595826089, 3.564889960605044, 3.5140942634506454, 3.618260757734515, 3.4212492446805, 3.561187273327513, 3.524596722678113, 3.481810948000002, 3.487385998218342, 3.618582489841006, 3.522221835387389, 3.537328354250002, 3.495573687316241, 3.4939372097021297, 3.518809865204303, 3.489037113236053, 3.486623233123969, 3.524759796623855, 3.500966114666668, 3.463678431193279, 3.4644518306086973, 3.476161956474578, 3.4615591146666684, 3.464107282862387, 3.5035754853444, 3.4547825025454566], 't': [1718807508.477642, 1718807508.4951098, 1718807508.5117369, 1718807508.5284736, 1718807508.6606517, 1718807508.6784012, 1718807508.6955457, 1718807508.7121167, 1718807508.745045, 1718807508.777726, 1718807508.8110225, 1718807508.8450403, 1718807508.877665, 1718807508.911709, 1718807508.945045, 1718807508.9784846, 1718807509.0117698, 1718807509.0451345, 1718807509.078409, 1718807509.1117992, 1718807509.1451428, 1718807509.1777396, 1718807509.2109375, 1718807509.2609053, 1718807509.2950737, 1718807509.312291, 1718807509.3451293, 1718807509.3784323, 1718807509.4117858, 1718807509.4450994, 1718807509.4785037, 1718807509.5118566, 1718807509.5452135, 1718807509.5785196, 1718807509.6279657, 1718807509.6456637, 1718807509.6951969, 1718807509.7118459, 1718807509.745144, 1718807509.7785692, 1718807509.8118234, 1718807509.845194, 1718807509.8785243, 1718807509.9118662, 1718807509.9617329, 1718807509.9950948, 1718807510.0277505, 1718807510.0610783, 1718807510.095194, 1718807510.1117628, 1718807510.145109, 1718807510.1784813, 1718807510.2118552, 1718807510.245179, 1718807510.278503, 1718807510.32849, 1718807510.3611662, 1718807510.3951724, 1718807510.4278784, 1718807510.4610353, 1718807510.4951723, 1718807510.5117784, 1718807510.5450847, 1718807510.5785122, 1718807510.6118782, 1718807510.6618366, 1718807510.6931822, 1718807510.7285142, 1718807510.7615824, 1718807510.795211, 1718807510.8277676, 1718807510.8613307, 1718807510.8950493, 1718807510.9117422, 1718807510.945193, 1718807510.9784715, 1718807511.028423, 1718807511.045051, 1718807511.0618386, 1718807511.1283517, 1718807511.1612098, 1718807511.1951087, 1718807511.2276268, 1718807511.2609224, 1718807511.2950985, 1718807511.3277857, 1718807511.361846, 1718807511.3935792, 1718807511.411697, 1718807511.4283948, 1718807511.462118, 1718807511.5283735, 1718807511.6615226, 1718807511.678415, 1718807511.69395, 1718807511.7116764, 1718807511.7284248, 1718807511.7450483, 1718807511.761804, 1718807511.778377, 1718807511.793925, 1718807511.8283815]}

dir = "collect_331_5D_surface/time_series"
max_fx = -100
min_fx = 100
max_fy = -100
min_fy = 100
max_fz = -100
min_fz=100
for file in os.listdir(dir):
    with open(os.path.join(dir, file), 'rb') as f:
        data = pickle.load(f)
        if max(data['fx']) > max_fx:
            max_fx = max(data['fx'])
        if min(data['fx']) < min_fx:
            min_fx = min(data['fx'])
        if max(data['fy']) > max_fy:
            max_fy = max(data['fy'])
        if min(data['fy']) < min_fy:
            min_fy = min(data['fy'])
        if max(data['fz']) > max_fz:
            max_fz = max(data['fz'])
        if min(data['fz']) < min_fz:
            min_fz = min(data['fz'])
print(max_fx, min_fx, max_fy, min_fy, max_fz, min_fz)
# 3.194190008565217 -4.186623157866097 2.80666496183682 -4.653198307965518 14.198157419509974 -0.050536551999998514
